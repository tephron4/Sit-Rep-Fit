/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    java
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

val mockitoAgent = configurations.create("mockitoAgent")

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)

    // Database dependencies
    implementation("org.hibernate.orm:hibernate-core:7.1.4.Final") // JPA Implementation (Hibernate Core)
    implementation("org.xerial:sqlite-jdbc:3.50.3.0") // Database Driver (SQLite)
    implementation("jakarta.persistence:jakarta.persistence-api:3.2.0") // JPA Annotations

    // Add support for JUnit (testing)
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.13.4")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.13.4")
    testImplementation("org.junit.platform:junit-platform-launcher:1.13.4")

    // Add support for parameterized tests
    testImplementation("org.junit.jupiter:junit-jupiter-params:6.0.0")

    // Add support for mocking classes in tests
    testImplementation(libs.mockito)
    mockitoAgent(libs.mockito) { isTransitive = false }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

application {
    // Define the main class for the application.
    mainClass = "workout_processing.GetWorkout"
}

tasks.named<JavaExec>("run") {
    standardInput = System.`in`
}

tasks.named<Test>("test") {
    useJUnitPlatform()
}

tasks {
    test {
        jvmArgs.add("-javaagent:${mockitoAgent.asPath}")
    }
}